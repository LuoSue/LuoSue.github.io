{"meta":{"title":"LuoSue's Blog","subtitle":null,"description":"闲话苑","author":"LuoSue","url":"https://fallensue.cc"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-11-07T10:37:48.955Z","comments":false,"path":"about/index.html","permalink":"https://fallensue.cc/about/index.html","excerpt":"","text":"[天意城のLuoSue] 与&nbsp; LuoSue&nbsp; （ 茄子 ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"bangumi/index.html","permalink":"https://fallensue.cc/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"books","date":"2020-10-27T06:39:26.000Z","updated":"2020-10-27T06:39:26.405Z","comments":true,"path":"books/index.html","permalink":"https://fallensue.cc/books/index.html","excerpt":"","text":""},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-11-02T13:59:56.452Z","comments":true,"path":"links/index.html","permalink":"https://fallensue.cc/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"artitalk","date":"2020-11-08T14:16:01.000Z","updated":"2020-11-08T10:46:14.773Z","comments":false,"path":"artitalk/index.html","permalink":"https://fallensue.cc/artitalk/index.html","excerpt":"","text":"var img=””; var appID= ‘cJsUVOg7I9utk9hiYW4IU7KB-MdYXbMMI’; var appKEY= ‘mzyqLMOSjeVwxY0D09qW8O8z’; var per= “”; var username= “”; L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/shizuku.model.json\"},\"display\":{\"position\":\"left\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"log\":false});"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-11-02T13:58:00.756Z","comments":true,"path":"comment/index.html","permalink":"https://fallensue.cc/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-11-02T13:59:35.060Z","comments":false,"path":"lab/index.html","permalink":"https://fallensue.cc/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-11-02T13:57:46.174Z","comments":false,"path":"client/index.html","permalink":"https://fallensue.cc/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"movies","date":"2020-10-27T06:39:40.000Z","updated":"2020-10-27T06:39:40.381Z","comments":true,"path":"movies/index.html","permalink":"https://fallensue.cc/movies/index.html","excerpt":"","text":""},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-11-02T13:59:23.206Z","comments":false,"path":"donate/index.html","permalink":"https://fallensue.cc/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"photos","date":"2020-10-27T06:39:05.000Z","updated":"2020-10-27T06:39:05.034Z","comments":true,"path":"photos/index.html","permalink":"https://fallensue.cc/photos/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-11-08T04:17:33.609Z","comments":false,"path":"music/index.html","permalink":"https://fallensue.cc/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"https://fallensue.cc/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://fallensue.cc/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"https://fallensue.cc/rss/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"https://fallensue.cc/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"图的基本定义","slug":"数据结构-图基本定义","date":"2020-11-14T13:30:01.000Z","updated":"2020-11-14T13:45:35.679Z","comments":true,"path":"2020/11/14/数据结构-图基本定义/","link":"","permalink":"https://fallensue.cc/2020/11/14/数据结构-图基本定义/","excerpt":"","text":"图的基本定义基本术语图（graph）图是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G(V,E)，其中，G表示一个图，V是图G中的顶点的集合，E是图G中边的集合。 顶点(Vertex)图中的数据元素。线性表中我们把数据元素叫元素，树中将数据元素叫结点。 边顶点之间的逻辑关系用边来表示，边集可以是空的。 无向边(Edge)若两个顶点之间的边没有方向，则称这条边为无向边。用(V1,V2)表示。(V1,V2) ≠ (V2,V1) 有向边(弧)(Arc)若两个顶点之间的边有方向，则称这条边为有向边。用&lt;V1,V2&gt;表示，V1为弧尾(Tail)(或终端点)，V2为弧头(Head)(或初始点)。&lt;V1,V2&gt; ≠ &lt;V2,V1&gt; 无向图(Undirected graphs)图中任意两个顶点之间的边都是无向边。 有向图(Directed graphs) 图中任意两个顶点之间的边都是有向边。 完全图(Completed graph) 有(1/2)*n(n-1)条边的无向图称为无向完全图，有n(n-1)条弧的有向图称为有向完全图。 稀疏图(Sparse graph)有很少条边或弧(如e&lt;nlogn)的图。 稠密图(Dense graph):不是稀疏图的图。 权（Weight）与图的边或弧相关的数。 网（Network）带权的图。 子图（Subgraph）假设G=（V,{E}）和G‘=（V’,{E’}），如果V’包含于V且E’包含于E，则称G’为G的子图。 邻接点(Adjacent)如果边(v,w)属于E，则称顶点v与w互为邻接点,v与w相邻接。边(v,w)依附于顶点v与w，或者说(v,w)和顶点v和w相关联。 度(Degree)是与v相关联的边的数目，记为TD(V).有向图中，入度表示指向自己的边的数目，出度表示指向其他边的数目，该顶点的度等于入度与出度的和. 路径(Path)从一个点到另一个的顶点序列，第一个顶点与最后一个顶点相同的路径称为回路或环(Cycle)。序列中顶点不重复的路径称为简单路径。 连通图(Connected graph)图中任意两个顶点都是连通的(从一个顶点到另一个顶点有路径)。 连通分量(Connected Component)无向图中的极大连通子图。 强连通图有向图中任意两个顶点之间都有路径。 生成树极小连通子图，含有图中全部顶点，但只有足以构成一棵树的n-1条边。","categories":[{"name":"学习","slug":"学习","permalink":"https://fallensue.cc/categories/学习/"}],"tags":[{"name":"DataStructure","slug":"DataStructure","permalink":"https://fallensue.cc/tags/DataStructure/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"https://fallensue.cc/categories/学习/"}]},{"title":"OS内存管理","slug":"OS内存管理","date":"2020-11-10T13:55:01.000Z","updated":"2020-11-11T14:16:33.250Z","comments":true,"path":"2020/11/10/OS内存管理/","link":"","permalink":"https://fallensue.cc/2020/11/10/OS内存管理/","excerpt":"","text":"内存管理为什么需要内存管理？原因： 内存越来越不值钱 需要高效的利用CPU的能力 背景CPU根据程序计数器的值从内存中提取指令，这些指令可能引起对特定内存地址的额外加载以及存储。 一个典型的指令执行周期， 首先从内存中读取指令。接着， 该指令会被解码， 也可能需要从内存中读取操作数。内存单元只看到地址流，而不知道这些地址从何产生。 基本硬件CPU可以直接访问的通用存储只有内存和处理器内置的寄存器。因此，执行指令以及指令使用的数据，应该处在这些可以直接访问的存础设备上。如果数据不在内存中， 那么在CPU 使用它们之前应先把数据移到内存。 CPU 内置寄存器通常可以在一个CPU 时钟周期内完成访问。完成内存的访问可能需要多个CPU 时钟周期。在这种情况下， 由于没有数据以便完成正在执行的指令， CPU 通常需要暂停(stall)。由于内存访问的频繁，这种情况是我们不想见到的。补救措施是在CPU 与内存之间， 通常是在CPU 芯片上， 增加更快的内存；这称为高速缓存(cache)。 为了确保操作的正确，首先，我们需要确保每个进程都有一个单独的内存空间。单独的进程内存空间可以保护进程而不互相影响，这对于将多个进程加到内存以便并发执行来说至关重要，通过两个寄存器，通常为基地址和界限地址，如图8所示，我们可以提供这种保护。基地址寄存器含有最小的合法的物理内存地址，而界限地址寄存器指定了范围的大小。 内存空间的保护是通过CPU对在用户模式下产生的地址与寄存器的地址进行比较而得成的。只有操作系统可以通过特殊的特权指令，才能加载基地址寄存器和界限地址寄存器。这个方案允许操作系统修改这两个寄存器的值，而不允许用户程序修改它们。 在内核模式下执行的操作系统可以无限制地访问操作系统及用户的内存。 地址绑定源程序中的地址通常是用符号表示，编译器会将这些符号地址绑定到可重定位的地址。链接程序或加载程序再将这些可重定位的地址绑定到绝对地址（如74014)。每次绑定都是从一个地址空间到另一个地址空间的映射。 通常，指令和数据绑定到存储器地址可在沿途的任何一步中进行： 编译时：如果在编译时就已知道进程将在内存中的驻留地址，那么就可以生成绝对代码。 加载时：如果在编译时并不知道进程将驻留在何处，那么编译器就应生成可重定位代码。 执行时：如果进程在执行时可以从一个内存段移到另一个内存段，那么绑定应延迟到执行时才进行。 逻辑地址空间与物理地址空间CPU生成的地址叫做逻辑地址，内存单元看到的地址（即加载到内存地址寄存器的地址）通常称为物理地址。 编译时和加载时的地址绑定方法生成相同的逻辑地址和物理地址。然而， 执行时的地址绑定方案生成不同的逻辑地址和物理地址。在这种情况下， 我们通常称逻辑地址为虚拟地址。 从虚拟地址到物理地址的运行时映射是由内存管理单元（MMU）来完成。 动态加载为了获得更好的内存空间利用率，可以使用动态加载。采用动态加载时，一个程序只有在调用时才会加载。当一个程序需要调用另一个程序时，调用程序首先检查另一个程序是否加载。如果没有，则将其加载到内存中。 优点：只有一个程序被需要时才会加载，不需要操作系统提供特别支持。 交换进程必须在内存中以便执行。不过，进程可以暂时从内存交换到备份存储器，当再次执行时再调回内存中。 标准交换标准交换在内存与备份存储之间移动进程。备份存储通常是快速硬盘。系统维护一个可运行的所有进程的就绪队列，它们的映像在备份存储或者是内存中。 这种交换的上下文切换时间相当高。主要耗时是传输时间，为有效使用这种方法， 用户需要告诉系统它的内存需求情况。因此， 具有动态内存需求的进程需要通过系统调用来通知操作系统内存使用情况。 想换出一个进程必须保证它是空闲的。 现代操作系统现在并不使用标准交换。它的交换时间太多， 它提供的执行时间太少， 不是合理的内存管理的解决方案。 连续内存分配内存通常分为两个区域：一个用于驻留操作系统，另一个用于用户进程。 通常， 我们需要将多个进程同时放在内存中。因此我们需要考虑， 如何为输入队列中需要调入内存的进程分配内存空间。在采用连续内存分配时，每个进程位于一个连续的内存区域， 与包含下一个进程的内存相连。 内存保护防止进程访问不属于它的内存，可以采用重定位寄存器以及界限寄存器。每个逻辑地址应在界限寄存器规定的范围内。MMU通过动态地将逻辑地址加上重定位寄存器的值， 来进行映射。映射后的地址再发送到内存。 内存分配最简单：将内存分为多个固定大小的分区，每个分区可以只包含一个进程。（多分区方法）当一个分区空闲时，可以从输入队列中选择一个进程，来调入空闲分区。当该进程终止时，它的分区可以用于其他进程。 对于可变分区方案，操作系统有一个表，用于记录哪些内存可用和哪些内存已用。一大块的可用内存被称为孔 从一组可用孔中选择一个空闲孔的最常用方法包括：首次适应、最优适应、最差适应 首次适应：分配首个足够大的孔。 最优适应：分配最小的足够大的空。 最差适应：分配最大的孔。 碎片用于内存分配的首次适应和最优适应算法都有外部碎片的问题。 外部碎片问题：随着进程加载到内存和从内存退出， 空闲内存空间被分为小的片段。当总的可用内存之和可以满足请求但并不连续时， 这就出现了外部碎片问题：存储被分成了大量的小孔。这个问题可能很严重。最坏情况下，每两个进程之间就有空闲（或浪费的）块。 内部碎片：因此， 通常按固定大小的块为单位（而不是字节）来分配内存。采用这种方案， 进程所分配的内存可能比所需的要大。这两个数字之差称为内部碎片，这部分内存在分区内部，但又不能用。 外部碎片问题解决方法：紧缩，目的是移动内存内容以便将所有空闲空间合并成一整块。 外部碎片化问题的另一个可能的解决方案是：允许进程的逻辑地址空间是不连续的。","categories":[{"name":"学习","slug":"学习","permalink":"https://fallensue.cc/categories/学习/"}],"tags":[{"name":"OS","slug":"OS","permalink":"https://fallensue.cc/tags/OS/"}],"keywords":[{"name":"学习","slug":"学习","permalink":"https://fallensue.cc/categories/学习/"}]},{"title":"Hello Hexo","slug":"Hello Hexo","date":"2020-11-06T14:16:01.000Z","updated":"2020-11-10T13:27:32.256Z","comments":true,"path":"2020/11/06/Hello Hexo/","link":"","permalink":"https://fallensue.cc/2020/11/06/Hello Hexo/","excerpt":"","text":"序言过了这么久终于能够有一个自己的博客了，以后有什么想法就会往上面发。","categories":[{"name":"技术","slug":"技术","permalink":"https://fallensue.cc/categories/技术/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://fallensue.cc/tags/Hexo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://fallensue.cc/categories/技术/"}]}]}